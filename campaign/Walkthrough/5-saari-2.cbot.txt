extern void object::Saari2()
{
    object item;
    int i = 0;
    int errcode = 0;

    if (category == WheeledShooter)
    {
				goto(-30, 0);
        aim(0);

        while (true)
        {
            item = radar(AlienAnt, 0, 360, 0, 40);
            if (item != null)
            {
                turn(direction(item.position));
                fire(0.5);
            }
            wait(1);
        }

        item = radar(PowerStation);
        if (item == null)
        {
            message("Waiting for PowerStation to be built.");
        }

        trygoto(item.position); // Use trygoto() to handle movement errors

        while (energyCell.energyLevel < 1)
        {
            wait(1);
        }
    }
    else if (category == WheeledGrabber)
    {
        Tit();
        Power();
        Tower();
        Tit();
        Power();
        turn(-135);
        move(20);
        Tower(); //2 tower
        Tit(); //grab and drop
        Power();
				drop();
        turn(90);
        move(4); //OK!

				item = radar(BotFactory);
				if (item == null) message("Waiting for Botfactory to be built.");
				while (item == null) item = radar(BotFactory);
				trygoto(item.position); // Use trygoto() for improved reliability
				drop();

        //Power();
        item = radar(WingedShooter);
        if (item == null) message("Waiting for WingedShooter to be built.");
        while (item == null) item = radar(WingedShooter);
        goto(item.position);
        drop();
    }
    else if (category == WingedShooter)
    {
        object bot, target, Ship;
        point b, ship, t, t2;
        boolean dofire = false;
        float flyheight = 0;

        Ship = radar(SpaceShip);
        ship = Ship.position;

        do
        {
            target = radar(AlienAnt, 0, 360, 7.25);
            if (target == null) target = Ship;

            bot = radar(AlienAnt, 0, 180);
            if (bot != null)
                b = bot.position;
            else
                b = ship;

            t2 = target.position;
            if (distance(position, t2) < distance(position, b))
            {
                t = t2;
                flyheight = 0.8;
                dofire = false;
            }
            else
            {
                t = b;
                flyheight = 9.5;
                if (t != ship) dofire = true;
            }

            if (t == ship) flyheight = 1.25;

            if (t == ship && distance(position, t) <= 10)
            {
                aim(0);
                jet(0);
                motor(0, 0);
                break;
            }

            jet((t.z - position.z + flyheight) / 20);
            motor(1 - (direction(t) / 90), 1 + (direction(t) / 90));
            aim(asin((b.z - position.z) / distance(position, b)));

            if (dofire && distance(position, t) <= 30)
                fire(0.1);

            if (energyCell.energyLevel < 0.5)
            {
                item = radar(PowerStation);
                if (item != null)
                {
                    trygoto(item.position); // Use trygoto() for PowerStation navigation
                    while (energyCell.energyLevel < 1)
                    {
                        wait(1);
                    }
                }
            }
        } while (target != null);
    }
    else if (category == WheeledShooter)
    {
        object item = null;
        point loc;
        float fire_angle;
        float ground;
        float z_diff;

        errmode(0);

        while (true)
        {
            CheckSelfStatus();

            item = radar(AlienAnt, 0, 360, 15, 700);
            if (item == null)
            {
                item = radar(AlienAnt);
                if (item == null)
                {
                    CheckSelfStatus();
                    message("No enemies found, sleeping for awhile...");
                    item = radar(SpaceShip);
                    trygoto(item.position); // Use trygoto() to navigate safely to the SpaceShip
                    move(-3.0); // move back a bit so we aren't so close to the ship's pole.
                    wait(60);
                    continue;
                }
            }

            // Get a location that is 35 units in front of us.
            loc.x = (cos(orientation) * 35.0) + position.x;
            loc.y = (sin(orientation) * 35.0) + position.y;
            loc.z = position.z + 5.0;
            ground = topo(loc); // Get the ground height at this location.

            // Now try to maintain a height of about 15 units above the ground.
            if ((ground + 15.0) > position.z)
            {
                jet(0.4);
            }
            else if (((ground + 15.0) < position.z) && (altitude > 5.0))
            {
                jet(-0.7);
            }
            else
            {
                jet(0);
            }
            motor(1, 1); // Start moving at full throttle.
            wait(0.5); // Wait a little so we don't constantly turn to face enemy.

            // Make sure we are at least 20 units away before turning.
            if (distance2d(position, item.position) > 20.0)
            {
                turn(direction(item.position));
                z_diff = position.z - item.position.z;
                if (z_diff > 5.0)
                {
                    // Our Z differences are too great, so go down.
                    jet(-1);
                }
                if (distance2d(position, item.position) < 50.0)
                {
                    turn(direction(item.position));
                    fire_angle = -20.0; // Angle down as far as we can.
                    aim(fire_angle);
                    fire(0.1); // Fire short bursts (saves energy, but still kills).
                }
            }
        }
    }
}

// Functions defined outside the main Saari2 function
void object::Tit()
{
    object item;
    int errcode = 0;

    item = radar(Titanium); // Locate Titanium
    trygoto(item.position); // Use trygoto to reach the Titanium
    
    grab(); // Grab the item

    // Check if the grabbed item is not Titanium
    if (load.category != Titanium) 
    {
        drop(); // Drop the incorrect item
        trygoto(item.position); // Retry moving to Titanium
        grab(); // Attempt to grab again
    }
    
    trygoto(flatspace(position, 12)); // Move to a nearby flat space
    drop(); // Drop the Titanium
}

void object::Power()
{
	object item;
	int i = 0;
	int errcode = 0;

	item = radar(PowerCell);
	errcode = goto(item.position);
	while (errcode != 0)
	{
		errcode = goto(item.position);
	}
	grab();
}

void object::Tower()
{
	object item;
	int i = 0;
	int errcode = 0;

	item = radar(DefenseTower);
	if(item == null) message("Waiting for DefenseTower to be built.");
	while(item == null) item = radar(DefenseTower);
	trygoto(item.position);
	drop();
}

// WingedShooter
void object::CheckSelfStatus()
{
	object item;

	if(energyCell.energyLevel < 0.55)
	{
		Recharge2(0); // Recharge, but don't go back to previous position.
		if(shieldLevel < 1) // Might as well repair while we are back at base.
		{
			item = radar(RepairCenter);
			goto(item.position);
			wait(6);
		}
	}
	if(temperature > 0.70)
	{
		GotoSafeLZ();
	}
	if(shieldLevel < 0.70)
	{
		item = radar(RepairCenter);
		goto(item.position);
		while ( shieldLevel < 1 )
		{
			wait(1);            // waits until fully repaired.
		}

		if(energyCell.energyLevel < 0.85) // Recharge while we are at base.
		{
			Recharge2(0); // Recharge, but don't go back to previous position.
		}
	}
}

void object::GotoSafeLZ()
{
	object item;
	float EnemyDist = 10000.0;
	point loc;

	item = radar(AlienAnt);
	if(item != null)
	{
		EnemyDist = distance2d(position, item.position);
	}
	if(EnemyDist > 50.0)
	{
		message("Need rest, no enemies close.");
	}
	else
	{
		message("Enemies close, moving away to rest.");
		//turn((direction(item.position) + 180.0)); // Turn away from nearest enemy.
		// Move 50 feet away from enemy.
		loc.x = (cos(orientation) * 50.0) + item.position.x;
		loc.y = (sin(orientation) * 50.0) + item.position.y;
		loc.z = position.z + 5.0;
		goto(loc); // use goto so it will intelligently find a path if necessary.
	}

	if(topo(position) < 0)
	{
		// There is deep water below me, I can't land here or I'll die, so try to find some
		// dry land close by.
		int counter = 0;

		message("Can't land in water, looking for safe place to set down...");
		while(counter < 36)
		{
			loc.x = (cos(orientation) * 20.0) + position.x;
			loc.y = (sin(orientation) * 20.0) + position.y;
			loc.z = position.z + 5.0;
			if(topo(position) >= 0)
			{
				// Found some land, so go there to land.
				message("Found some land, moving there.");
				move(20.0);
				break;
			}
			turn(10);
			counter++;
		}

	}

	LandAndRest();
}

void object::LandAndRest()
{
	message("Landing and resting.");
	while(temperature > 0)
	{
		if(altitude > 0)
		{
			jet(-1);
		}
		wait(0.5);
	}
	message("Done resting, let me at 'em!");
}

void object::Recharge2(int ReturnToPrevious)
{
	point  start;          // variable for initial pos.
	object item;           // info. about power station

	message("Heading in for recharging...");
	start = position;      // stores initial position

	item = radar(PowerStation); // looks for station
	goto(item.position);   // goes to the power station

	while ( energyCell.energyLevel < 1 )
	{
		wait(1);            // waits until recharged
	}

	if(ReturnToPrevious >= 1)
	{
		goto(start);           // comes back to initial pos.
	}
	message("Recharge completed.");
}

void object::trygoto(point pos)
{
    errmode(0); // Turn off errors
    int tries = 0; // Initialize tries counter
    while (true) // Infinite loop until successful navigation
    {
        if (goto(pos) == 0)
        {
            break; // Exit loop if goto is successful
        }
        tries++;
        wait(2); // Optionally add a wait to avoid tight loops
        goto(space()); // Attempt to move to a nearby open space if stuck
        goto(pos, 0, 1); // Use additional parameters for flexibility
    }
    errmode(1); // Turn errors back on
}

